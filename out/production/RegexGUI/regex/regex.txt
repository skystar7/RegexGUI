Character classes or Character categorizations
[a] a
[abc] a or b or c
[a-z] a to z
[A-Z] A to Z
[0-9] 0 to 9
[^0-9] negation: any characters except 0 to 9 
[a-z[A-Z]] Union: a to z or A to Z
[a-f && [cj]] Intersection: a to f intersection c or j --> c 
[[a-f]&&[^cj]] Subtraction a-f subtract c or j--> a b d e f
For Intersection & Subtraction the character classes have to be compatible characters as in the above example
or numbers as in this example [[0-9]&&[^2-3]] -->0 1 4 5 6 7 8 9

String literals
test will literally look for test in the search string

Predefined character classes
\\d --> [0-9]
\\D --> [^0-9] Any character except 0-9 range
\\s --> [ \\n\\r\\t\\f] regular space, new line, carriage return, tab, and formfeed
\\S --> [^\\n\\r\\t\\f] any character except for the above
\\w --> [a-z[A-Z][0-9][_]] a to z, A to Z, 0 to 9, and underscore
\\W --> [^a-z[A-Z][0-9][_]] any character except for the above

Metacharacters
[] define a character class
() Capturing Group
- define a range
^ a negation
| OR
. wildcard anycharacter, to find dot \\. first escape to escape java escape, second escape to escape dot metacharacter
& used in intersection
\ to escape metacharacters or predefined characters, \\\\ need two escapes in our pattern, first for escape the escape, second to escape the metacharacter \
OR
\Q metacharacter or metacharacters \E, again in java these has to be escaped \\Q...\\E in which this one will look for three dots OR \\Q string literal \\E
{} used in quantifiers
? once or not at all
+ mean one or more just like {1,}
* mean zero or more just like {0,}

Capturing Group
(someText)
([Ss]omeText)
((Hello)|(hello))

Quantifiers
{} Find a sequence 
{x} EXACTLY times
{x,} AT LEAST x times
{x,y} BETWEEN x to y times

[ab]{3} Character classes: find a or b or combination in a sequence three times, 2^3=8 patterns could be formed --> aaa aab abb, etc
(test){2} Capturing group: find a string literal in a sequence exatly two times --> testtest
test{2} Substring: find a string literal that end in t in a sequence exatly two times --> testt 


Greedy quantifier
Will match the as many quantified patterns as possible from the search string but return the longest one
Greedy quantifiers are:
?
*
+
{X}
{X,}
{Y,}
For example:
This is some sample text, more sample text.
sample.+ --> sample text, more sample text. NOT sample text.

greedy quantifier will go all the way to the end and then backtrack, but it will backtrack to find the next occurence

Reluctant quantifier
Will match each quantified pattern and return the smallest one if possible.

Reluctant quantifiers are:
??
*?
+?
{X}?
{X,}?
{Y,}?

For example:
This is some sample text, more sample text.
sample.+? -->
sample_ (_underscore is space here)
sample_ (_underscore is space here)
hence the quantifier says 1 or more it will always return the smallest on each match

Binary example: "01100111"
?
??
*
*?
With the nothing or zero depending on the context of these quantifiers in the above example 
it will return nothing which start and end at the same index.

_0_1_2_3_4_5_6_7_8

_0 start
_8 end

The left underscore represent the start of that index
Note: the addition of index _8 that represent the end of regex

HTML example:
<html> <body><h1>heading1</h1><h2>heading2</h2><h1>h1</h1></body> </html>
<(h\d)>.+</\1> Greedy
<(h\d)>.+?</\1> Reluctant

Possessive quantifier
Just like the greedy quantifier but they never backtrack.

Reluctant quantifiers are:
?+
*+
++
{X}+
{X,}+
{Y,}+

| --> regex1 | regex2 
If the characters or substring already consumed from regex1, then it can't be consumed from regex2 

Regex Boundaries
It allow to assert where a certain regex or token should be located

^ If placed at the begining of pattern, then the match should also be at the begining
$ If placed at the end of pattern, then the match should also be at the end
For example to search for a valid phone numbers ^\\d{3}-\\d{3}-\\d{4}$

\b word boundary- \bpattern\b pattern is a word on its own that mean it may have spaces around it or could be the first or last word in the search string
\B non-word boundary- \Bpattern\b we may also can mix the two boundaries which in this example it may start with a non-word and end with a word boundary


Pattern
Pattern.compile(patternString, Pattern.CASE_INSENSITIVE)
Create a pattern object that is CASE_INSENSITIVE
Pattern.compile(patternString, Pattern.DOTALL)
Create a pattern object that is allow the dot to be a new line or line terminator
or (?s) can be used which stand for single line

static boolean matches (String regex,String searchString)
it matches the regex against the whole searchString, it implicitly add ^regex$ to the regex passed

static String quote(String regex)
Return our regex quoted with \\Q\\E --> \\Qregex\\E

String pattern 
simply return the pattern String

String[] split(CharSequence input)
it will split input around the regex compiled

String[] split(CharSequence input,int limit)
if limit n is positive the array size would be n-1,
if limit is negative array would have no limit, 
if limit is zero the result would be as many as possible, and trailing empty strings will be discarded.

Matcher
groupCount() it will count the number of capturing group starting from 1, the enrire pattern or group is 0, and it is not counted
group(int) it will tell us the finding belong to which group count in the pattern when looping with matcher.find()

Inline modifier (? ) it is non capturing group 
(?i) Ignore case similar as Pattern.compile(patternString, Pattern.CASE_INSENSITIVE)
We can turn off the flag by (?-i)

(?s) can be used which stand for single line as Pattern.compile(patternString, Pattern.DOTALL) 
This allow the wildcard . to search for anything including the new line terminator 

(?d) = Pattern.UNIX_LINES Allo searchString to have only the unix style line terminator \n when intepretting . ^ $ metacharacters

(?m) = Pattern.MULTILINE Allo searchString to be in a multiline

Naming Capturing group
?<myName>(theGroup) It always has to be enclosed with () --> (?<myName>(theGroup)) OR (?<myName>theGroup) otherwise it is a syntax error
then it can be referenced from matcher.group(String groupName)

Backreferencing
It is used to find repeative pattern of characters or substring, for example:

Apples, bananas, and tootsie rolls.
(\w)\1 --> pp oo ll
(\w\w)\1 --> anan

It can also be nested 
(\w)(\w)\2\1 --> toot

Or back referenced hence the name: <html> <body> Javac Java </body> </html>
<([^>]+)>.*</\1> --> <html> <body> Javac Java </body> </html>

There are two types of: numbered or named
(?<myName>(theGroup))\k<myName> same rules can be applied as the numbered one.

Non-Capturing group
(?:) same as capturing group but:
1- It won't be counted by the regex engine
2- Yield faster results
3- It won't be retrived from group.(int) or group.(String)

We may include inline modifier or embeded flag expressions like (?i: pattern) with them

Carriage return
"someText\rnewText" --> newTextt  
It moves the carriage to the begining of the line and overwrite 
but in testing it replace the whole line --> newText

Formfeed
"someText\fnewText" --> someText
								newText
Moves to the next line and to one column to the right doing an indentation								 
But in testing it places just one space "someText\fnewText" --> someText newText